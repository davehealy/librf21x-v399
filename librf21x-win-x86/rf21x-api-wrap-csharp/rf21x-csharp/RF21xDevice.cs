//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class RF21xDevice : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal RF21xDevice(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(RF21xDevice obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~RF21xDevice() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          rf21xPINVOKE.delete_RF21xDevice(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public RF21xDevice() : this(rf21xPINVOKE.new_RF21xDevice(), true) {
  }

  public bool open(int type, string port, int minId, int maxId) {
    bool ret = rf21xPINVOKE.RF21xDevice_open(swigCPtr, type, port, minId, maxId);
    return ret;
  }

  public bool close() {
    bool ret = rf21xPINVOKE.RF21xDevice_close(swigCPtr);
    return ret;
  }

  public bool startQuiz(int type, int param1, int param2, int newQuiz) {
    bool ret = rf21xPINVOKE.RF21xDevice_startQuiz__SWIG_0(swigCPtr, type, param1, param2, newQuiz);
    return ret;
  }

  public bool startQuiz(int type, int param1, int param2) {
    bool ret = rf21xPINVOKE.RF21xDevice_startQuiz__SWIG_1(swigCPtr, type, param1, param2);
    return ret;
  }

  public bool startQuiz(int type, int param1) {
    bool ret = rf21xPINVOKE.RF21xDevice_startQuiz__SWIG_2(swigCPtr, type, param1);
    return ret;
  }

  public bool startQuiz(int type) {
    bool ret = rf21xPINVOKE.RF21xDevice_startQuiz__SWIG_3(swigCPtr, type);
    return ret;
  }

  public bool startDirectly(int type, SWIGTYPE_p_void buffer) {
    bool ret = rf21xPINVOKE.RF21xDevice_startDirectly(swigCPtr, type, SWIGTYPE_p_void.getCPtr(buffer));
    return ret;
  }

  public bool stopQuiz() {
    bool ret = rf21xPINVOKE.RF21xDevice_stopQuiz(swigCPtr);
    return ret;
  }

  public bool setKeypadId(int id) {
    bool ret = rf21xPINVOKE.RF21xDevice_setKeypadId(swigCPtr, id);
    return ret;
  }

  public byte GetQuizResult(int id, int QuizNo) {
    byte ret = rf21xPINVOKE.RF21xDevice_GetQuizResult(swigCPtr, id, QuizNo);
    return ret;
  }

  public void ClearQuizResult() {
    rf21xPINVOKE.RF21xDevice_ClearQuizResult(swigCPtr);
  }

  public virtual bool readDeviceSerialNumber(int deviceType, string devicePort, SWIGTYPE_p_std__string sn, bool isDefault) {
    bool ret = rf21xPINVOKE.RF21xDevice_readDeviceSerialNumber(swigCPtr, deviceType, devicePort, SWIGTYPE_p_std__string.getCPtr(sn), isDefault);
    if (rf21xPINVOKE.SWIGPendingException.Pending) throw rf21xPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool writeDeviceSerialNumber(int deviceType, string devicePort, string sn) {
    bool ret = rf21xPINVOKE.RF21xDevice_writeDeviceSerialNumber(swigCPtr, deviceType, devicePort, sn);
    if (rf21xPINVOKE.SWIGPendingException.Pending) throw rf21xPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool resetDeviceSerialNumber(int deviceType, string devicePort) {
    bool ret = rf21xPINVOKE.RF21xDevice_resetDeviceSerialNumber(swigCPtr, deviceType, devicePort);
    return ret;
  }

  public virtual bool checkDeviceSerialNumber(int deviceType, string devicePort, string sn) {
    bool ret = rf21xPINVOKE.RF21xDevice_checkDeviceSerialNumber(swigCPtr, deviceType, devicePort, sn);
    if (rf21xPINVOKE.SWIGPendingException.Pending) throw rf21xPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool getMessage(RF21xMessage message) {
    bool ret = rf21xPINVOKE.RF21xDevice_getMessage(swigCPtr, RF21xMessage.getCPtr(message));
    if (rf21xPINVOKE.SWIGPendingException.Pending) throw rf21xPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
